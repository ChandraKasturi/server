---
# Namespace for the application
apiVersion: v1
kind: Namespace
metadata:
  name: sahasra-api
  labels:
    name: sahasra-api

---
# PersistentVolumeClaim for static files
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sahasra-static-pvc
  namespace: sahasra-api
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard-rwo  # Change based on your cluster's storage class

---
# Deployment for the FastAPI application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sahasra-api
  namespace: sahasra-api
  labels:
    app: sahasra-api
spec:
  replicas: 3  # Run 3 replicas for high availability
  selector:
    matchLabels:
      app: sahasra-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: sahasra-api
    spec:
      containers:
      - name: api
        # TODO: Replace with your actual GCP Artifact Registry image URI
        # Format: REGION-docker.pkg.dev/PROJECT_ID/REPO_NAME/IMAGE_NAME:TAG
        # Example: us-central1-docker.pkg.dev/my-project/sahasra/sahasra-api:v1.0.0
        image: asia-south1-docker.pkg.dev/astral-pipe-476019-v1/sahasra/sahasra:test  # Replace with your Docker image
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        
        
        # Volume mounts
        volumeMounts:
        - name: static-files
          mountPath: /app/server/static
        
        # Resource limits and requests
        resources:
          requests:
            cpu: "2000m"
            memory: "2Gi"
          limits:
            cpu: "4000m"
            memory: "4Gi"
        
        # Liveness probe - check if container is alive
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 300
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        # Readiness probe - check if container is ready to serve traffic
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe - give app time to start up
        startupProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30  # Allow up to 5 minutes for startup
      
      volumes:
      - name: static-files
        persistentVolumeClaim:
          claimName: sahasra-static-pvc
      
      # Add pod anti-affinity to spread replicas across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - sahasra-api
              topologyKey: kubernetes.io/hostname

---
# Service for the FastAPI application
apiVersion: v1
kind: Service
metadata:
  name: sahasra-api
  namespace: sahasra-api
  labels:
    app: sahasra-api
  annotations:
    # For AWS - uncomment and configure as needed
    # service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # Network Load Balancer
    # service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    # For GCP - uncomment as needed
    cloud.google.com/load-balancer-type: "External"
    # For Azure - uncomment as needed
    # service.beta.kubernetes.io/azure-load-balancer-internal: "false"
spec:
  type: LoadBalancer  # Changed from ClusterIP to LoadBalancer
  ports:
  - port: 80          # External port (standard HTTP)
    targetPort: 8000  # Internal container port
    protocol: TCP
    name: http
  - port: 443         # External port (HTTPS) - optional, for SSL termination at LB
    targetPort: 8000  # You'd need to configure SSL in the app or use Ingress
    protocol: TCP
    name: https
  selector:
    app: sahasra-api
  # Optional: Preserve client source IP
  externalTrafficPolicy: Cluster  # or "Cluster" for better distribution

---
# HorizontalPodAutoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sahasra-api-hpa
  namespace: sahasra-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sahasra-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# PodDisruptionBudget to ensure availability during voluntary disruptions
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sahasra-api-pdb
  namespace: sahasra-api
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: sahasra-api



